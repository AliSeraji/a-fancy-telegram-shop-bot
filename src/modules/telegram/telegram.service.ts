import { forwardRef, Inject, Injectable, Logger } from '@nestjs/common';
import * as TelegramBot from 'node-telegram-bot-api';
import { ConfigService } from '@nestjs/config';
import { UserService } from '../user/user.service';
import { OrderService } from '../order/order.service';
import { DeliveryService } from '../delivery/delivery.service';
import { formatOrderList, formatUserList, formatProductList, formatCategoryList, formatFeedbackList } from './utils/helpers';
import { getMainKeyboard, getAdminKeyboard } from './utils/keyboards';

@Injectable()
export class TelegramService {
  private bot: TelegramBot;
  private logger = new Logger(TelegramService.name);
  private readonly adminTelegramUser = 'Vali_003';

  constructor(
    private configService: ConfigService,
    private userService: UserService,
    @Inject(forwardRef(() => OrderService)) private readonly orderService: OrderService,
    private deliveryService: DeliveryService,
  ) {
    const token = '7942071036:AAFz_o_p2p2o-Gq-1C1YZMQSdODCHJiu2dY';
    if (!token) {
      this.logger.error('TELEGRAM_BOT_TOKEN is not defined in .env file');
      throw new Error('TELEGRAM_BOT_TOKEN is not defined');
    }
    this.bot = new TelegramBot(token, { polling: false });
    this.setupWebhook();
    this.setupCommands();
  }

  private async setupWebhook() {
    try {
      const webhookUrl = 'https://telegram-shop-bot-production.up.railway.app/telegram/webhook';
      if (!webhookUrl) {
        this.logger.error('WEBHOOK_URL is not defined in .env file');
        throw new Error('WEBHOOK_URL is not defined');
      }
      this.logger.log(`Setting webhook to ${webhookUrl}`);
      const startTime = Date.now();
      await this.bot.setWebHook(webhookUrl);
      const duration = Date.now() - startTime;
      this.logger.log(`Webhook set in ${duration}ms`);
    } catch (error) {
      this.logger.error(`Failed to set webhook: ${error.message}`);
      throw error;
    }
  }

  private setupCommands() {
    this.bot.onText(/\/admin/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from.id.toString();
      try {
        const user = await this.userService.findByTelegramId(telegramId);
        const language = user.language || 'uz';
        if (!user.isAdmin) {
          const message = language === 'uz'
            ? '‚ùå Bu amal faqat adminlar uchun mavjud.'
            : '‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.';
          await this.bot.sendMessage(chatId, message);
          return;
        }
        const message = language === 'uz'
          ? 'üë®‚Äçüíª Admin paneliga xush kelibsiz!'
          : 'üë®‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!';
        await this.bot.sendMessage(chatId, message, {
          reply_markup: getAdminKeyboard(language),
        });
      } catch (error) {
        this.logger.error(`Error in admin command: ${error.message}`);
        const message = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        await this.bot.sendMessage(chatId, message);
      }
    });

    this.bot.onText(/üë§ (Profilim|–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å)/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from.id.toString();
      try {
        const user = await this.userService.findByTelegramId(telegramId);
        const language = user.language || 'uz';
        const message = language === 'uz'
          ? `üë§ Profilim\nIsm: ${user.fullName}\nTelefon: ${user.phone || 'Kiritilmagan'}\nTelegram ID: ${user.telegramId}`
          : `üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n–ò–º—è: ${user.fullName}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\nTelegram ID: ${user.telegramId}`;
        await this.bot.sendMessage(chatId, message, {
          reply_markup: getMainKeyboard(!user.phone, language),
        });
      } catch (error) {
        this.logger.error(`Error in profile: ${error.message}`);
        await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    this.bot.onText(/üïò (Buyurtma tarixi|–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤)/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from.id.toString();
      try {
        const user = await this.userService.findByTelegramId(telegramId);
        const language = user.language || 'uz';
        const orders = await this.orderService.getUserOrders(telegramId);
        const message = orders.length
          ? formatOrderList(orders, language)
          : language === 'uz'
            ? 'Buyurtmalar mavjud emas.'
            : '–ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.';
        await this.bot.sendMessage(chatId, language === 'uz' ? `üïò Buyurtma tarixi\n${message}` : `üïò –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤\n${message}`, {
          reply_markup: getMainKeyboard(!user.phone, language),
          parse_mode: 'HTML',
        });
      } catch (error) {
        this.logger.error(`Error in order history: ${error.message}`);
        await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    this.bot.onText(/‚ÑπÔ∏è (Biz haqimizda|–û –Ω–∞—Å)/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from.id.toString();
      try {
        const user = await this.userService.findByTelegramId(telegramId);
        const language = user.language || 'uz';
        const message = language === 'uz'
          ? `‚ÑπÔ∏è Biz haqimizda\nBiz onlayn do‚Äòkonmiz, sifatli mahsulotlar va tezkor xizmat taklif qilamiz!\nAloqa: @${this.adminTelegramUser}\nVeb-sayt: https://yourshop.uz`
          : `‚ÑπÔ∏è –û –Ω–∞—Å\n–ú—ã –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É!\n–ö–æ–Ω—Ç–∞–∫—Ç: @${this.adminTelegramUser}\n–í–µ–±-—Å–∞–π—Ç: https://yourshop.uz`;
        await this.bot.sendMessage(chatId, message, {
          reply_markup: getMainKeyboard(!user.phone, language),
        });
      } catch (error) {
        this.logger.error(`Error in about: ${error.message}`);
        await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
  }

  getBotInstance(): TelegramBot {
    return this.bot;
  }

  async handleWebhookUpdate(update: TelegramBot.Update) {
    try {
      const startTime = Date.now();
      await this.bot.processUpdate(update);
      const duration = Date.now() - startTime;
      this.logger.log(`Webhook update processed in ${duration}ms`);
    } catch (error) {
      this.logger.error(`Webhook update failed: ${error.message}`);
      throw error;
    }
  }

  async sendMessage(chatId: any, text: string, options?: TelegramBot.SendMessageOptions) {
    try {
      await this.bot.sendMessage(chatId, text, options);
    } catch (error) {
      this.logger.error(`Error sending message to chatId ${chatId}: ${error.message}`);
      throw error;
    }
  }

  async sendPhoto(chatId: number, photo: string, options?: TelegramBot.SendPhotoOptions) {
    try {
      await this.bot.sendPhoto(chatId, photo, options);
    } catch (error) {
      this.logger.error(`Error sending photo to chatId ${chatId}: ${error.message}`);
      throw error;
    }
  }

  async sendChatAction(chatId: string | number, action: TelegramBot.ChatAction) {
    try {
      await this.bot.sendChatAction(chatId, action);
    } catch (error) {
      this.logger.error(`Error sending chat action to chatId ${chatId}: ${error.message}`);
      throw error;
    }
  }
}