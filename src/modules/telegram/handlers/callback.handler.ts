import { Injectable, Logger } from '@nestjs/common';
import * as TelegramBot from 'node-telegram-bot-api';
import { CategoryService } from '../../category/category.service';
import { ProductService } from '../../product/product.service';
import { UserService } from '../../user/user.service';
import { OrderService } from '../../order/order.service';
import { FeedbackService } from '../../feedback/feedback.service';
import { PromocodeService } from '../../promocode/promocode.service';
import { DeliveryService } from '../../delivery/delivery.service';
import { TelegramService } from '../telegram.service';
import { formatCategoryList, formatProductList, formatUserList, formatOrderList, formatFeedbackList, formatDeliveryList, formatStats } from '../utils/helpers';
import { getAdminKeyboard } from '../utils/keyboards';

@Injectable()
export class CallbackHandler {
  private logger = new Logger(CallbackHandler.name);

  constructor(
    private categoryService: CategoryService,
    private productService: ProductService,
    private userService: UserService,
    private orderService: OrderService,
    private feedbackService: FeedbackService,
    private promocodeService: PromocodeService,
    private deliveryService: DeliveryService,
    private telegramService: TelegramService,
  ) {}

  handle() {
    const bot = this.telegramService.getBotInstance();
    bot.on('callback_query', async (query) => {
      const chatId = query.message.chat.id;
      const telegramId = query.from.id.toString();
      const data = query.data;
      let language = 'uz';
      try {
        this.logger.log(`Processing callback: ${data} for telegramId: ${telegramId}`);
        const user = await this.userService.findByTelegramId(telegramId);
        language = user.language || 'uz';

        if (!user.isAdmin) {
          const message = language === 'uz'
            ? '‚ùå Bu amal faqat adminlar uchun mavjud.'
            : '‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.';
          await this.telegramService.sendMessage(chatId, message, {});
          return;
        }

        if (data === 'add_category') {
          const message = language === 'uz' ? 'üìã Kategoriya nomini kiriting:' : 'üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { force_reply: true } });
          bot.once('message', async (msgName) => {
            const name = msgName.text;
            const descMessage = language === 'uz' ? 'üìù Kategoriya tavsifini kiriting:' : 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:';
            await this.telegramService.sendMessage(chatId, descMessage, { reply_markup: { force_reply: true } });
            bot.once('message', async (msgDesc) => {
              try {
                await this.categoryService.create({ name, description: msgDesc.text });
                const successMessage = language === 'uz' ? '‚úÖ Kategoriya qo‚Äòshildi!' : '‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!';
                await this.telegramService.sendMessage(chatId, successMessage, {
                  reply_markup: getAdminKeyboard(language),
                });
              } catch (error) {
                this.logger.error(`Error in add_category: ${error.message}`);
                const errorMessage = language === 'uz' ? '‚ùå Kategoriya qo‚Äòshishda xato yuz berdi.' : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.';
                await this.telegramService.sendMessage(chatId, errorMessage, {});
              }
            });
          });
        } else if (data === 'view_categories') {
          const categories = await this.categoryService.findAll();
          await this.telegramService.sendMessage(chatId, formatCategoryList(categories, language), {
            parse_mode: 'HTML',
            reply_markup: getAdminKeyboard(language),
          });
        } else if (data === 'edit_category') {
          const categories = await this.categoryService.findAll();
          const keyboard: TelegramBot.InlineKeyboardButton[][] = categories.map((cat) => [
            { text: cat.name, callback_data: `edit_cat_${cat.id}` },
          ]);
          const message = language === 'uz' ? '‚úèÔ∏è Tahrir qilinadigan kategoriyani tanlang:' : '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { inline_keyboard: keyboard } });
        } else if (data.startsWith('edit_cat_')) {
          const categoryId = parseInt(data.split('_')[2]);
          const message = language === 'uz' ? 'üìã Yangi kategoriya nomini kiriting:' : 'üìã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { force_reply: true } });
          bot.once('message', async (msgName) => {
            const name = msgName.text;
            const descMessage = language === 'uz' ? 'üìù Yangi kategoriya tavsifini kiriting:' : 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:';
            await this.telegramService.sendMessage(chatId, descMessage, { reply_markup: { force_reply: true } });
            bot.once('message', async (msgDesc) => {
              try {
                await this.categoryService.update(categoryId, { name, description: msgDesc.text });
                const successMessage = language === 'uz' ? '‚úÖ Kategoriya yangilandi!' : '‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!';
                await this.telegramService.sendMessage(chatId, successMessage, {
                  reply_markup: getAdminKeyboard(language),
                });
              } catch (error) {
                this.logger.error(`Error in edit_category: ${error.message}`);
                const errorMessage = language === 'uz' ? '‚ùå Kategoriyani tahrirlashda xato yuz berdi.' : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.';
                await this.telegramService.sendMessage(chatId, errorMessage, {});
              }
            });
          });
        } else if (data === 'delete_category') {
          const categories = await this.categoryService.findAll();
          const keyboard: TelegramBot.InlineKeyboardButton[][] = categories.map((cat) => [
            { text: cat.name, callback_data: `delete_cat_${cat.id}` },
          ]);
          const message = language === 'uz' ? 'üóë O‚Äòchiriladigan kategoriyani tanlang:' : 'üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { inline_keyboard: keyboard } });
        } else if (data.startsWith('delete_cat_')) {
          const categoryId = parseInt(data.split('_')[2]);
          await this.categoryService.remove(categoryId);
          const message = language === 'uz' ? '‚úÖ Kategoriya o‚Äòchirildi.' : '‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.';
          await this.telegramService.sendMessage(chatId, message, {
            reply_markup: getAdminKeyboard(language),
          });
        } else if (data === 'add_product') {
          const message = language === 'uz'
            ? 'üì¶ Mahsulot ma‚Äòlumotlarini kiriting (nomi;narxi;tasviri;rasm URL;kategoriya ID;ombordagi soni):'
            : 'üì¶ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ;—Ü–µ–Ω–∞;–æ–ø–∏—Å–∞–Ω–∏–µ;URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è;ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏;–∫–æ–ª-–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ):';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { force_reply: true } });
          bot.once('message', async (msg) => {
            try {
              const [name, price, description, imageUrl, categoryId, stock] = msg.text.split(';');
              const parsedCategoryId = parseInt(categoryId.trim());
              const parsedStock = parseInt(stock.trim());
              if (isNaN(parsedCategoryId) || isNaN(parsedStock)) {
                const errorMessage = language === 'uz'
                  ? '‚ùå Kategoriya ID yoki ombor soni noto‚Äòg‚Äòri.'
                  : '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ.';
                await this.telegramService.sendMessage(chatId, errorMessage, {});
                return;
              }
              const category = await this.categoryService.findOne(parsedCategoryId);
              if (!category) {
                const errorMessage = language === 'uz'
                  ? `‚ùå Kategoriya ID ${parsedCategoryId} topilmadi.`
                  : `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${parsedCategoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
                await this.telegramService.sendMessage(chatId, errorMessage, {});
                return;
              }
              await this.productService.create({
                name: name.trim(),
                price: parseFloat(price.trim()),
                description: description.trim(),
                imageUrl: imageUrl.trim(),
                categoryId: parsedCategoryId,
                stock: parsedStock,
                isActive: true,
              });
              const successMessage = language === 'uz' ? '‚úÖ Mahsulot qo‚Äòshildi.' : '‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.';
              await this.telegramService.sendMessage(chatId, successMessage, {
                reply_markup: getAdminKeyboard(language),
              });
            } catch (error) {
              this.logger.error(`Error in add_product: ${error.message}`);
              const errorMessage = language === 'uz' ? '‚ùå Mahsulot qo‚Äòshishda xato yuz berdi.' : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.';
              await this.telegramService.sendMessage(chatId, errorMessage, {});
            }
          });
        } else if (data === 'view_products') {
          const products = await this.productService.findAll();
          await this.telegramService.sendMessage(chatId, formatProductList(products, language), {
            parse_mode: 'HTML',
            reply_markup: getAdminKeyboard(language),
          });
        } else if (data === 'edit_product') {
          const products = await this.productService.findAll();
          const keyboard: TelegramBot.InlineKeyboardButton[][] = products.map((prod) => [
            { text: prod.name, callback_data: `edit_prod_${prod.id}` },
          ]);
          const message = language === 'uz' ? '‚úèÔ∏è Tahrir qilinadigan mahsulotni tanlang:' : '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { inline_keyboard: keyboard } });
        } else if (data.startsWith('edit_prod_')) {
          const productId = parseInt(data.split('_')[2]);
          const message = language === 'uz'
            ? 'üì¶ Yangi mahsulot ma‚Äòlumotlarini kiriting (nomi;narxi;tasviri;rasm URL;kategoriya ID;ombordagi soni):'
            : 'üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ;—Ü–µ–Ω–∞;–æ–ø–∏—Å–∞–Ω–∏–µ;URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è;ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏;–∫–æ–ª-–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ):';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { force_reply: true } });
          bot.once('message', async (msg) => {
            try {
              const [name, price, description, imageUrl, categoryId, stock] = msg.text.split(';');
              const parsedCategoryId = parseInt(categoryId.trim());
              const parsedStock = parseInt(stock.trim());
              if (isNaN(parsedCategoryId) || isNaN(parsedStock)) {
                const errorMessage = language === 'uz'
                  ? '‚ùå Kategoriya ID yoki ombor soni noto‚Äòg‚Äòri.'
                  : '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ.';
                await this.telegramService.sendMessage(chatId, errorMessage, {});
                return;
              }
              const category = await this.categoryService.findOne(parsedCategoryId);
              if (!category) {
                const errorMessage = language === 'uz'
                  ? `‚ùå Kategoriya ID ${parsedCategoryId} topilmadi.`
                  : `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${parsedCategoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
                await this.telegramService.sendMessage(chatId, errorMessage, {});
                return;
              }
              await this.productService.update(productId, {
                name: name.trim(),
                price: parseFloat(price.trim()),
                description: description.trim(),
                imageUrl: imageUrl.trim(),
                categoryId: parsedCategoryId,
                stock: parsedStock,
              });
              const successMessage = language === 'uz' ? '‚úÖ Mahsulot yangilandi.' : '‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω.';
              await this.telegramService.sendMessage(chatId, successMessage, {
                reply_markup: getAdminKeyboard(language),
              });
            } catch (error) {
              this.logger.error(`Error in edit_product: ${error.message}`);
              const errorMessage = language === 'uz' ? '‚ùå Mahsulotni tahrirlashda xato yuz berdi.' : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.';
              await this.telegramService.sendMessage(chatId, errorMessage, {});
            }
          });
        } else if (data === 'delete_product') {
          const products = await this.productService.findAll();
          const keyboard: TelegramBot.InlineKeyboardButton[][] = products.map((prod) => [
            { text: prod.name, callback_data: `delete_prod_${prod.id}` },
          ]);
          const message = language === 'uz' ? 'üóë O‚Äòchiriladigan mahsulotni tanlang:' : 'üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { inline_keyboard: keyboard } });
        } else if (data.startsWith('delete_prod_')) {
          const productId = parseInt(data.split('_')[2]);
          await this.productService.remove(productId);
          const message = language === 'uz' ? '‚úÖ Mahsulot o‚Äòchirildi.' : '‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω.';
          await this.telegramService.sendMessage(chatId, message, {
            reply_markup: getAdminKeyboard(language),
          });
        } else if (data === 'view_users') {
          const users = await this.userService.findAll();
          await this.telegramService.sendMessage(chatId, formatUserList(users, language), {
            parse_mode: 'HTML',
            reply_markup: getAdminKeyboard(language),
          });
        } else if (data === 'edit_user') {
          const users = await this.userService.findAll();
          const keyboard: TelegramBot.InlineKeyboardButton[][] = users.map((user) => [
            { text: user.fullName || (language === 'uz' ? 'Kiritilmagan' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), callback_data: `edit_user_${user.id}` },
          ]);
          const message = language === 'uz' ? '‚úèÔ∏è Tahrir qilinadigan foydalanuvchini tanlang:' : '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { inline_keyboard: keyboard } });
        } else if (data.startsWith('edit_user_')) {
          const userId = parseInt(data.split('_')[2]);
          const message = language === 'uz'
            ? 'üë§ Yangi ism va telefon raqamini kiriting (ism;telefon):'
            : 'üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–º—è;—Ç–µ–ª–µ—Ñ–æ–Ω):';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { force_reply: true } });
          bot.once('message', async (msg) => {
            try {
              const [fullName, phone] = msg.text.split(';');
              await this.userService.update(userId, { fullName: fullName.trim(), phone: phone.trim() });
              const successMessage = language === 'uz' ? '‚úÖ Foydalanuvchi ma‚Äòlumotlari yangilandi.' : '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.';
              await this.telegramService.sendMessage(chatId, successMessage, {
                reply_markup: getAdminKeyboard(language),
              });
            } catch (error) {
              this.logger.error(`Error in edit_user: ${error.message}`);
              const errorMessage = language === 'uz' ? '‚ùå Foydalanuvchini tahrirlashda xato yuz berdi.' : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.';
              await this.telegramService.sendMessage(chatId, errorMessage, {});
            }
          });
        } else if (data === 'delete_user') {
          const users = await this.userService.findAll();
          const keyboard: TelegramBot.InlineKeyboardButton[][] = users.map((user) => [
            { text: user.fullName || (language === 'uz' ? 'Kiritilmagan' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), callback_data: `delete_user_${user.id}` },
          ]);
          const message = language === 'uz' ? 'üóë O‚Äòchiriladigan foydalanuvchini tanlang:' : 'üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { inline_keyboard: keyboard } });
        } else if (data.startsWith('delete_user_')) {
          const userId = parseInt(data.split('_')[2]);
          await this.userService.remove(userId);
          const message = language === 'uz' ? '‚úÖ Foydalanuvchi o‚Äòchirildi.' : '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.';
          await this.telegramService.sendMessage(chatId, message, {
            reply_markup: getAdminKeyboard(language),
          });
        } else if (data === 'view_orders') {
          const orders = await this.orderService.findAll(1, 10);
          const keyboard: TelegramBot.InlineKeyboardButton[][] = orders.length === 10 ? [[{ text: language === 'uz' ? '‚û°Ô∏è Keyingi sahifa' : '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data: 'view_orders_2' }]] : [];
          await this.telegramService.sendMessage(chatId, formatOrderList(orders, language), {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'HTML',
          });
        } else if (data.startsWith('view_orders_')) {
          const page = parseInt(data.split('_')[2]) || 1;
          const orders = await this.orderService.findAll(page, 10);
          const keyboard: TelegramBot.InlineKeyboardButton[][] = [];
          if (orders.length === 10) {
            keyboard.push([{ text: language === 'uz' ? '‚û°Ô∏è Keyingi sahifa' : '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data: `view_orders_${page + 1}` }]);
          }
          if (page > 1) {
            keyboard.push([{ text: language === 'uz' ? '‚¨ÖÔ∏è Oldingi sahifa' : '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data: `view_orders_${page - 1}` }]);
          }
          await this.telegramService.sendMessage(chatId, formatOrderList(orders, language), {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'HTML',
          });
        } else if (data === 'view_deliveries') {
          const deliveries = await this.deliveryService.findAll(1, 10);
          const keyboard: TelegramBot.InlineKeyboardButton[][] = deliveries.length === 10 ? [[{ text: language === 'uz' ? '‚û°Ô∏è Keyingi sahifa' : '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data: 'view_deliveries_2' }]] : [];
          await this.telegramService.sendMessage(chatId, formatDeliveryList(deliveries, language), {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'HTML',
          });
        } else if (data.startsWith('view_deliveries_')) {
          const page = parseInt(data.split('_')[2]) || 1;
          const deliveries = await this.deliveryService.findAll(page, 10);
          const keyboard: TelegramBot.InlineKeyboardButton[][] = [];
          if (deliveries.length === 10) {
            keyboard.push([{ text: language === 'uz' ? '‚û°Ô∏è Keyingi sahifa' : '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data: `view_deliveries_${page + 1}` }]);
          }
          if (page > 1) {
            keyboard.push([{ text: language === 'uz' ? '‚¨ÖÔ∏è Oldingi sahifa' : '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data: `view_deliveries_${page - 1}` }]);
          }
          await this.telegramService.sendMessage(chatId, formatDeliveryList(deliveries, language), {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'HTML',
          });
        } else if (data === 'edit_delivery') {
          const deliveries = await this.deliveryService.findAll(1, 10);
          const keyboard: TelegramBot.InlineKeyboardButton[][] = deliveries.map((delivery) => [
            { text: `üìã ID: ${delivery.id}`, callback_data: `edit_delivery_${delivery.id}` },
          ]);
          const message = language === 'uz' ? '‚úèÔ∏è Tahrir qilinadigan yetkazib berishni tanlang:' : '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { inline_keyboard: keyboard } });
        } else if (data.startsWith('edit_delivery_')) {
          const deliveryId = parseInt(data.split('_')[2]);
          const message = language === 'uz'
            ? 'üìä Yangi statusni kiriting (pending, in_transit, delivered, cancelled):'
            : 'üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (pending, in_transit, delivered, cancelled):';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { force_reply: true } });
          bot.once('message', async (msg) => {
            try {
              await this.deliveryService.update(deliveryId, { status: msg.text });
              const successMessage = language === 'uz' ? '‚úÖ Yetkazib berish statusi yangilandi.' : '‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.';
              await this.telegramService.sendMessage(chatId, successMessage, {
                reply_markup: getAdminKeyboard(language),
              });
            } catch (error) {
              this.logger.error(`Error in edit_delivery: ${error.message}`);
              const errorMessage = language === 'uz' ? '‚ùå Yetkazib berish statusini yangilashda xato yuz berdi.' : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.';
              await this.telegramService.sendMessage(chatId, errorMessage, {});
            }
          });
        } else if (data === 'view_feedback') {
          const feedbacks = await this.feedbackService.findAll();
          await this.telegramService.sendMessage(chatId, formatFeedbackList(feedbacks, language), {
            parse_mode: 'HTML',
            reply_markup: getAdminKeyboard(language),
          });
        } else if (data === 'delete_feedback') {
          const feedbacks = await this.feedbackService.findAll();
          const keyboard: TelegramBot.InlineKeyboardButton[][] = feedbacks.map((fb) => [
            { text: `üìã ID: ${fb.id}, ${language === 'uz' ? 'Reyting' : '–†–µ–π—Ç–∏–Ω–≥'}: ${fb.rating}`, callback_data: `delete_fb_${fb.id}` },
          ]);
          const message = language === 'uz' ? 'üóë O‚Äòchiriladigan feedbackni tanlang:' : 'üóë –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { inline_keyboard: keyboard } });
        } else if (data.startsWith('delete_fb_')) {
          const feedbackId = parseInt(data.split('_')[2]);
          await this.feedbackService.remove(feedbackId);
          const message = language === 'uz' ? '‚úÖ Feedback o‚Äòchirildi.' : '‚úÖ –û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω.';
          await this.telegramService.sendMessage(chatId, message, {
            reply_markup: getAdminKeyboard(language),
          });
        } else if (data === 'create_promocode') {
          const message = language === 'uz'
            ? 'üéü Promo-kod ma‚Äòlumotlarini kiriting (kod;foiz;amal qilish muddati yyyy-mm-dd):'
            : 'üéü –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∫–æ–¥;–ø—Ä–æ—Ü–µ–Ω—Ç;—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è yyyy-mm-dd):';
          await this.telegramService.sendMessage(chatId, message, { reply_markup: { force_reply: true } });
          bot.once('message', async (msg) => {
            try {
              const [code, discountPercent, validTill] = msg.text.split(';');
              await this.promocodeService.create({
                code: code.trim(),
                discountPercent: parseFloat(discountPercent.trim()),
                validTill: new Date(validTill.trim()),
              });
              const successMessage = language === 'uz' ? '‚úÖ Promo-kod qo‚Äòshildi.' : '‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω.';
              await this.telegramService.sendMessage(chatId, successMessage, {
                reply_markup: getAdminKeyboard(language),
              });
            } catch (error) {
              this.logger.error(`Error in create_promocode: ${error.message}`);
              const errorMessage = language === 'uz' ? '‚ùå Promo-kod qo‚Äòshishda xato yuz berdi.' : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.';
              await this.telegramService.sendMessage(chatId, errorMessage, {});
            }
          });
        } else if (data === 'view_stats') {
          const stats = await this.orderService.getStats();
          await this.telegramService.sendMessage(chatId, formatStats(stats, language), {
            parse_mode: 'HTML',
            reply_markup: getAdminKeyboard(language),
          });
        }
      } catch (error) {
        this.logger.error(`Error in callback: ${error.message}`);
        const message = language === 'uz' ? '‚ùå Xatolik yuz berdi, iltimos keyinroq urinib ko‚Äòring.' : '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        await this.telegramService.sendMessage(chatId, message, {});
      } finally {
        try {
          await bot.answerCallbackQuery(query.id);
        } catch (err) {
          this.logger.error(`Error in answerCallbackQuery: ${err.message}`);
        }
      }
    });
  }
}